<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Repository.InMemory</name>
    </assembly>
    <members>
        <member name="T:Deveel.Data.InMemoryRepository`1">
            <summary>
            A repository that uses the memory of the process to store
            the entities.
            </summary>
            <typeparam name="TEntity">
            The type of entity managed by the repository.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.#ctor(System.Collections.Generic.IEnumerable{`0},Deveel.Data.IFieldMapper{`0})">
            <summary>
            Constructs the repository with the given list of
            initial entities.
            </summary>
            <param name="list">
            The list of entities to initialize the repository with.
            </param>
            <param name="fieldMapper">
            A service that maps a field by name to an expression that
            can select the field from an entity.
            </param>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},Deveel.Data.IFieldMapper{`0})">
            <summary>
            Constructs the repository with the given list of
            initial entities for the given tenant.
            </summary>
            <param name="tenantId">
            The identifier of the tenant that owns the entities.
            </param>
            <param name="list">
            A list of entities to initialize the repository with.
            </param>
            <param name="fieldMapper">
            A service that maps a field by name to an expression that
            can select the field from an entity.
            </param>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.Finalize">
            <summary>
            Destroys the instance of the repository.
            </summary>
        </member>
        <member name="P:Deveel.Data.InMemoryRepository`1.Entities">
            <summary>
            Gets the read-only list of entities in the repository.
            </summary>
        </member>
        <member name="P:Deveel.Data.InMemoryRepository`1.TenantId">
            <summary>
            Gets the identifier of the tenant that owns the entities,
            if any tenant is set.
            </summary>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.GetEntityKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.CountAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.ExistsAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.FindAllAsync(Deveel.Data.IQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.FindAsync(Deveel.Data.IQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.FindByKeyAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.MapField(System.String)">
            <summary>
            Maps the given field name to an expression that can select
            a field from an entity.
            </summary>
            <param name="fieldName">
            The name of the field to map.
            </param>
            <returns>
            Returns an expression that can select the field from an entity.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the mapping is not supported by the repository.
            </exception>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.Dispose(System.Boolean)">
            <summary>
            Disposes the repository and releases all the resources
            </summary>
            <param name="disposing">
            The flag indicating if the repository is disposing.
            </param>
        </member>
        <member name="M:Deveel.Data.InMemoryRepository`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.InMemoryRepositoryProvider`1">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IRepositoryProvider`1"/>
            that allows to create <see cref="T:Deveel.Data.InMemoryRepository`1"/>
            for a given tenant.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Deveel.Data.InMemoryRepositoryProvider`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{`0}},Deveel.Data.IFieldMapper{`0})">
            <summary>
            Constructs the provider with the given initial list 
            of entities.
            </summary>
            <param name="list">
            The initial list of entities to use to create the repositories.
            </param>
            <param name="fieldMapper">
            A service to map the fields of the entity to expressions
            that select the fields from the entity.
            </param>
        </member>
        <member name="P:Deveel.Data.InMemoryRepositoryProvider`1.FieldMapper">
            <summary>
            Gets the field mapper used to map the fields of the entity
            </summary>
        </member>
        <member name="M:Deveel.Data.InMemoryRepositoryProvider`1.GetRepository(System.String)">
            <summary>
            Gets a repository for the given tenant.
            </summary>
            <param name="tenantId">
            The identifier of the tenant to get the repository for.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.InMemoryRepository`1"/>
            for the given tenant.
            </returns>
        </member>
        <member name="M:Deveel.Data.InMemoryRepositoryProvider`1.CreateRepository(System.String,System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new repository for the given tenant.
            </summary>
            <param name="tenantId">
            The identifier of the tenant to create the repository for.
            </param>
            <param name="entities">
            A list of entities to initialize the repository with.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.InMemoryRepository`1"/>
            for the given tenant.
            </returns>
        </member>
        <member name="M:Deveel.Data.InMemoryRepositoryProvider`1.Dispose(System.Boolean)">
            <summary>
            Disposes the provider and all the repositories created.
            </summary>
            <param name="disposing">
            A flag indicating if the provider is disposing.
            </param>
        </member>
        <member name="M:Deveel.Data.InMemoryRepositoryProvider`1.Dispose">
            <inheritdoc/>
        </member>
    </members>
</doc>
