<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Repository.Manager.EasyCaching</name>
    </assembly>
    <members>
        <member name="T:Deveel.Data.Caching.EntityEasyCache`1">
            <summary>
            An implementation of <see cref="T:Deveel.Data.Caching.IEntityCache`1"/> that
            is based on an <see cref="T:EasyCaching.Core.IEasyCachingProvider"/>.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to cache.
            </typeparam>
            <remarks>
            This implementation of the Entity Cache assumes that the
            entity of type <typeparamref name="TEntity"/> is the same 
            type of the cached object.
            </remarks>
            <seealso cref="T:Deveel.Data.Caching.EntityEasyCache`2"/>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`1.#ctor(EasyCaching.Core.IEasyCachingProvider,Microsoft.Extensions.Options.IOptions{Deveel.Data.Caching.EntityCacheOptions{`0}},Deveel.Data.Caching.IEntityCacheKeyGenerator{`0},Deveel.Data.Caching.IEntityEasyCacheConverter{`0,`0})">
            <summary>
            Constructs the cache with the given provider and options.
            </summary>
            <param name="cacheProvider">
            The caching provider to use to cache the entities.
            </param>
            <param name="options">
            A set of options to configure the cache.
            </param>
            <param name="keyGenerator">
            A generator to create the keys to use to identify the
            entities in the cache.
            </param>
            <param name="converter">
            A converter to convert the entity to and from the cached
            instance of the entity.
            </param>
        </member>
        <member name="T:Deveel.Data.Caching.EntityEasyCache`2">
            <summary>
            An implementation of <see cref="T:Deveel.Data.Caching.IEntityCache`1"/> that
            uses the EasyCaching library to store the entities.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to cache.
            </typeparam>
            <typeparam name="TCached">
            The type of the cached version of the entity.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`2.#ctor(EasyCaching.Core.IEasyCachingProvider,Microsoft.Extensions.Options.IOptions{Deveel.Data.Caching.EntityCacheOptions{`0}},Deveel.Data.Caching.IEntityCacheKeyGenerator{`0},Deveel.Data.Caching.IEntityEasyCacheConverter{`0,`1})">
            <summary>
            Constructs the cache with the given provider and options.
            </summary>
            <param name="cacheProvider">
            The EasyCaching provider to use to store the entities.
            </param>
            <param name="options">
            A set of options to configure the entity cache.
            </param>
            <param name="keyGenerator">
            A generator to create the keys for the entities.
            </param>
            <param name="converter">
            A service to convert the entity to and from the cached version.
            </param>
        </member>
        <member name="P:Deveel.Data.Caching.EntityEasyCache`2.Expiration">
            <summary>
            Gets the expiration time for the cached entities.
            </summary>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`2.ConvertToCached(`0)">
            <summary>
            Attempts to convert the given entity to a version
            that can be cached.
            </summary>
            <param name="entity">
            The entity instance to convert.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TCached"/>
            that is the result of the conversion.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the conversion is not supported by the cache.
            </exception>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`2.ConvertFromCached(`1)">
            <summary>
            Attempts to convert back the given cached version of the entity
            to the original entity.
            </summary>
            <param name="cached">
            The instance of the cached version of the entity.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/>
            that is the result of the conversion.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the conversion is not supported by the cache.
            </exception>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`2.GenerateKeys(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`2.GetOrSetAsync(System.String,System.Func{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`2.RemoveAsync(System.String[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.Caching.EntityEasyCache`2.SetAsync(System.String[],`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.Caching.IEntityEasyCacheConverter`2">
            <summary>
            A service that provides the conversion of an 
            entity to and from a cached version of the entity.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to be cached.
            </typeparam>
            <typeparam name="TCached">
            The type of the cached entity.
            </typeparam>
            <remarks>
            This service is provided for cases in which
            the type of the entity to be cached is not
            serializable or cannot be easily cached,
            and therefore a conversion to and from another
            version is needed.
            </remarks>
        </member>
        <member name="M:Deveel.Data.Caching.IEntityEasyCacheConverter`2.ConvertToCached(`0)">
            <summary>
            Converts the given entity to an
            object that can be cached.
            </summary>
            <param name="entity"></param>
            <returns>
            Returns an object that can be cached.
            </returns>
        </member>
        <member name="M:Deveel.Data.Caching.IEntityEasyCacheConverter`2.ConvertFromCached(`1)">
            <summary>
            Converts back the given cached object
            to the original entity.
            </summary>
            <param name="cached">
            The cached object to be converted.
            </param>
            <returns>
            Returns the original entity.
            </returns>
        </member>
        <member name="T:Deveel.Data.Caching.ServiceCollectionExtensions">
            <summary>
            Extends the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to provide methods
            to register the <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/> service.
            </summary>
        </member>
        <member name="M:Deveel.Data.Caching.ServiceCollectionExtensions.AddEntityEasyCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a <see cref="T:Deveel.Data.Caching.EntityEasyCache`2"/> or
            <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/> service to the given 
            collection of services.
            </summary>
            <param name="services">
            The collection of services to register the cache.
            </param>
            <param name="cacheType">
            The type of the cache to register, that must be
            inherited from <see cref="T:Deveel.Data.Caching.EntityEasyCache`2"/> or
            <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/>.
            </param>
            <param name="lifetime">
            The desired lifetime of the cache.
            </param>
            <returns>
            Returns the given collection of services for chaining calls.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given <paramref name="cacheType"/> is not a valid
            type for an EasyCaching cache.
            </exception>
        </member>
        <member name="M:Deveel.Data.Caching.ServiceCollectionExtensions.AddEntityEasyCache``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a <see cref="T:Deveel.Data.Caching.EntityEasyCache`2"/> or
            <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/> service to the given 
            collection of services.
            </summary>
            <typeparam name="TCache">
            The type of the cache to register, that must be
            inherited from <see cref="T:Deveel.Data.Caching.EntityEasyCache`2"/> or
            <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/>.
            </typeparam>
            <param name="services">
            The collection of services to register the cache.
            </param>
            <param name="lifetime">
            The desired lifetime of the cache.
            </param>
            <returns>
            Returns the given collection of services for chaining calls.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given <typeparamref name="TCache"/> is not a valid
            type for an EasyCaching cache.
            </exception>
        </member>
        <member name="M:Deveel.Data.Caching.ServiceCollectionExtensions.AddEntityEasyCacheFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers the default <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/>
            for the given entity type.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to cache.
            </typeparam>
            <param name="services">
            The collection of services to register the cache.
            </param>
            <param name="lifetime">
            The desired lifetime of the cache.
            </param>
            <returns>
            Returns the given collection of services for chaining calls.
            </returns>
        </member>
        <member name="M:Deveel.Data.Caching.ServiceCollectionExtensions.AddEntityEasyCacheFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Deveel.Data.Caching.EntityCacheOptions},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers the default <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/>
            for the given entity type.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to cache.
            </typeparam>
            <param name="services">
            The collection of services to register the cache.
            </param>
            <param name="configure">
            A function that configures the options of the cache.
            </param>
            <param name="lifetime">
            The desired lifetime of the cache.
            </param>
            <returns>
            Returns the given collection of services for chaining calls.
            </returns>
        </member>
        <member name="M:Deveel.Data.Caching.ServiceCollectionExtensions.AddEntityEasyCacheFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers the default <see cref="T:Deveel.Data.Caching.EntityEasyCache`1"/>
            for the given entity type.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to cache.
            </typeparam>
            <param name="services">
            The collection of services to register the cache.
            </param>
            <param name="configSectionPath">
            The path of the configuration section that contains the options
            to configure the cache.
            </param>
            <param name="lifetime">
            The desired lifetime of the cache.
            </param>
            <returns>
            Returns the given collection of services for chaining calls.
            </returns>
        </member>
        <member name="M:Deveel.Data.Caching.ServiceCollectionExtensions.AddEntityEasyCacheConverter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a service that is used to convert an
            entity to a cached object and vice-versa.
            </summary>
            <param name="services">
            The collection of services to register the converter.
            </param>
            <param name="converterType">
            The type of the converter to register, that must be
            an implementation of <see cref="T:Deveel.Data.Caching.IEntityEasyCacheConverter`2"/>.
            </param>
            <param name="lifetime">
            The desired lifetime of the converter.
            </param>
            <returns>
            Returns the given collection of services for chaining calls.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given <paramref name="converterType"/> is not a valid
            instance of <see cref="T:Deveel.Data.Caching.IEntityEasyCacheConverter`2"/>.
            </exception>
        </member>
        <member name="M:Deveel.Data.Caching.ServiceCollectionExtensions.AddEntityEasyCacheConverter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a service that is used to convert an
            entity to a cached object and vice-versa.
            </summary>
            <typeparam name="TConverter">
            The type of the converter to register, that must be
            an implementation of <see cref="T:Deveel.Data.Caching.IEntityEasyCacheConverter`2"/>.
            </typeparam>
            <param name="services">
            The collection of services to register the converter.
            </param>
            <param name="lifetime">
            The desired lifetime of the converter.
            </param>
            <returns>
            Returns the given collection of services for chaining calls.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given <typeparamref name="TConverter"/> is not a valid
            instance of <see cref="T:Deveel.Data.Caching.IEntityEasyCacheConverter`2"/>.
            </exception>
        </member>
    </members>
</doc>
