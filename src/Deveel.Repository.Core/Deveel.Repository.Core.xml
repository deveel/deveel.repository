<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Repository.Core</name>
    </assembly>
    <members>
        <member name="T:Deveel.Data.CombinedQueryFilter">
            <summary>
            An object that combines multiple <see cref="T:Deveel.Data.IQueryFilter"/> objects
            into a single one.
            </summary>
        </member>
        <member name="M:Deveel.Data.CombinedQueryFilter.#ctor(System.Collections.Generic.ICollection{Deveel.Data.IQueryFilter})">
            <summary>
            Constructs the filter by combining the given list of filters.
            </summary>
            <param name="filters">
            The list of filters to combine.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the given list of filters is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the given list of filters is empty.
            </exception>
        </member>
        <member name="M:Deveel.Data.CombinedQueryFilter.Combine(Deveel.Data.IQueryFilter)">
            <summary>
            Creates a new combination between the filters
            of this object and the given one.
            </summary>
            <param name="filter">
            The filter to combine with this object.
            </param>
            <returns>
            Returns a new <see cref="T:Deveel.Data.CombinedQueryFilter"/> that combines
            the filters of this object and the given one.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given filter is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.CombinedQueryFilter.AsLambda``1">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.CombinedSort">
            <summary>
            An object that combines multiple <see cref="T:Deveel.Data.ISort"/> rules
            to be applied to a query.
            </summary>
        </member>
        <member name="M:Deveel.Data.CombinedSort.#ctor(System.Collections.Generic.IEnumerable{Deveel.Data.ISort})">
            <summary>
            Constructs the combined sort with the given list of rules.
            </summary>
            <param name="sorts">
            The initial list of sorts to combine.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given list of sorts is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the given list of sorts is empty.
            </exception>
        </member>
        <member name="M:Deveel.Data.CombinedSort.Combine(Deveel.Data.ISort)">
            <summary>
            Combines this list of sorts with the given one.
            </summary>
            <param name="sort">
            The sort rule to add to the combination.
            </param>
            <returns>
            Returns a new <see cref="T:Deveel.Data.CombinedSort"/> that combines
            the rules of this instance with the given one.
            </returns>
        </member>
        <member name="T:Deveel.Data.DefaultRepositoryController">
            <summary>
            A default implementation of the <see cref="T:Deveel.Data.IRepositoryController"/> interface
            </summary>
        </member>
        <member name="M:Deveel.Data.DefaultRepositoryController.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Data.RepositoryControllerOptions},System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Deveel.Data.DefaultRepositoryController})">
            <summary>
            Constructs a <see cref="T:Deveel.Data.DefaultRepositoryController"/> instance
            </summary>
            <param name="options">
            The options to configure the controller
            </param>
            <param name="serviceProvider">
            The service provider used to resolve the repositories
            </param>
            <param name="logger">
            A logger used to trace the operations
            </param>
        </member>
        <member name="M:Deveel.Data.DefaultRepositoryController.#ctor(Microsoft.Extensions.Options.IOptions{Deveel.Data.RepositoryControllerOptions},System.IServiceProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructs a <see cref="T:Deveel.Data.DefaultRepositoryController"/> instance
            </summary>
            <param name="options">
            The options to configure the controller
            </param>
            <param name="serviceProvider">
            The service provider used to resolve the repositories
            </param>
            <param name="logger">
            A logger used to trace the operations
            </param>
        </member>
        <member name="M:Deveel.Data.DefaultRepositoryController.CreateRepositoryAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.DefaultRepositoryController.CreateTenantRepositoryAsync``1(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.DefaultRepositoryController.DropRepositoryAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.DefaultRepositoryController.DropTenantRepositoryAsync``1(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.DelegatedFieldMapper`1">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IFieldMapper`1"/> that
            delegates the mapping of a field to an external function.
            </summary>
            <typeparam name="TEntity">
            The type of entity to map the fields to.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.DelegatedFieldMapper`1.#ctor(System.Func{System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}})">
            <summary>
            Creates a new instance of the mapper that delegates the mapping
            of a field to the given function.
            </summary>
            <param name="fieldMapper">
            The external function that maps a field name to an expression
            that selects the field from the entity.
            </param>
        </member>
        <member name="M:Deveel.Data.DelegatedFieldMapper`1.MapField(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.EnumerableExtensions">
            <summary>
            Extensions for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to provide
            the capability to wrap the collection into a <see cref="T:Deveel.Data.IRepository`1"/>.
            </summary>
        </member>
        <member name="M:Deveel.Data.EnumerableExtensions.AsRepository``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Makes the given collection of entities a <see cref="T:Deveel.Data.IRepository`1"/>.
            </summary>
            <typeparam name="TEntity">
            The type of the entities in the collection.
            </typeparam>
            <param name="entities">
            The collection of entities to wrap.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.IRepository`1"/> that wraps
            the given collection.
            </returns>
        </member>
        <member name="T:Deveel.Data.ExpressionQueryFilter`1">
            <summary>
            An implementation of a query filter that uses a lambda expression
            </summary>
            <typeparam name="TEntity">The type of entity to construct
            the field</typeparam>
        </member>
        <member name="M:Deveel.Data.ExpressionQueryFilter`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Constructs the filter with the given expression
            </summary>
            <param name="expr">
            The expression that is used to filter the entities
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the expression is <c>null</c>.
            </exception>
        </member>
        <member name="P:Deveel.Data.ExpressionQueryFilter`1.Expression">
            <summary>
            Gets the lambda filter expression
            </summary>
        </member>
        <member name="T:Deveel.Data.ExpressionSort`1">
            <summary>
            A sorting rule that references a field by
            using an expression.
            </summary>
            <typeparam name="TEntity">
            The type of entity of a collection that is the target
            of the sorting and that defines the field to select.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.ExpressionSort`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Deveel.Data.SortDirection)">
            <summary>
            Constructs the sorting rule using the given expression
            that selects the field to sort.
            </summary>
            <param name="field">
            The expression that selects the field to sort.
            </param>
            <param name="direction">
            The direction of the sorting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="field"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Deveel.Data.ExpressionSort`1.Field">
            <summary>
            Gets the expression that selects the field to sort.
            </summary>
        </member>
        <member name="P:Deveel.Data.ExpressionSort`1.Direction">
            <summary>
            Gets the direction of the sorting.
            </summary>
        </member>
        <member name="M:Deveel.Data.ExpressionSort`1.Deveel#Data#IQueryableSort{TEntity}#Apply(System.Linq.IQueryable{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.FieldSort">
            <summary>
            A sorting rule that references a field
            by its name.
            </summary>
        </member>
        <member name="M:Deveel.Data.FieldSort.#ctor(System.String,Deveel.Data.SortDirection)">
            <summary>
            Constructs the sorting rule for the given
            field name and direction.
            </summary>
            <param name="fieldName">
            The name of the field to sort by.
            </param>
            <param name="direction">
            The direction of the sorting.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="fieldName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Deveel.Data.FieldSort.FieldName">
            <summary>
            Gets the name of the field to sort by.
            </summary>
        </member>
        <member name="P:Deveel.Data.FieldSort.Direction">
            <summary>
            Gets the direction of the sorting.
            </summary>
        </member>
        <member name="M:Deveel.Data.FieldSort.Map``1(Deveel.Data.IFieldMapper{``0})">
            <summary>
            Resolves the field name to an expression
            that selects the field to sort.
            </summary>
            <typeparam name="TEntity">
            The type of entity of a collection that is the target
            of the sorting and that defines the field to select.
            </typeparam>
            <param name="mapper">
            An oobject that maps the field name to an expression.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.ExpressionSort`1"/>
            that is the result of the mapping.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the given <paramref name="mapper"/> cannot map
            the field name to an expression that selects the field.
            </exception>
        </member>
        <member name="T:Deveel.Data.IControllableRepository">
            <summary>
            A repository whose lifecycle can be controlled by the user
            </summary>
        </member>
        <member name="M:Deveel.Data.IControllableRepository.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if the repository exists in the underlying storage
            </summary>
            <param name="cancellationToken">
            A cancellation token used to cancel the operation
            </param>
            <returns>
            Returns <c>true</c> if the repository exists, or <c>false</c>
            </returns>
        </member>
        <member name="M:Deveel.Data.IControllableRepository.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the repository in the underlying storage
            </summary>
            <param name="cancellationToken">
            A cancellation token used to cancel the operation
            </param>
            <returns>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when the repository
            is created in the underlying storage
            </returns>
        </member>
        <member name="M:Deveel.Data.IControllableRepository.DropAsync(System.Threading.CancellationToken)">
            <summary>
            Drops the repository from the underlying storage
            </summary>
            <param name="cancellationToken">
            A cancellation token used to cancel the operation
            </param>
            <returns>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when the repository
            is dropped from the underlying storage
            </returns>
        </member>
        <member name="T:Deveel.Data.IExpressionQueryFilter">
            <summary>
            A type of query filter that is convertible
            to a LINQ lambda expression for filtering.
            </summary>
        </member>
        <member name="M:Deveel.Data.IExpressionQueryFilter.AsLambda``1">
            <summary>
            Converts the filter to a LINQ expression that can be
            used to filter a <see cref="T:System.Linq.IQueryable`1"/> storage
            </summary>
            <typeparam name="TEntity">
            The type of the entity to be filtered
            </typeparam>
            <returns>
            Returns an instance of <see cref="T:System.Linq.Expressions.LambdaExpression"/> that
            can be used to filter a <see cref="T:System.Linq.IQueryable`1"/>.
            </returns>
        </member>
        <member name="T:Deveel.Data.IFieldMapper`1">
            <summary>
            An object that maps a field name to a <see cref="T:System.Linq.Expressions.Expression"/>
            used to select the field from an entity.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Deveel.Data.IFieldMapper`1.MapField(System.String)">
            <summary>
            Maps the given field name to an expression that selects
            a member of the entity.
            </summary>
            <param name="fieldName">
            The name of the field to map.
            </param>
            <returns>
            Returns an expression that selects the field from the entity.
            </returns>
        </member>
        <member name="T:Deveel.Data.IFilterableRepository`1">
            <summary>
            Represents a repository that can be filtered to retrieve a subset of
            the entities it contains.
            </summary>
            <typeparam name="TEntity">
            The strongly typed entity that is stored in the repository
            </typeparam>
        </member>
        <member name="M:Deveel.Data.IFilterableRepository`1.ExistsAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)">
            <summary>
            Determines if at least one item in the repository exists for the
            given filtering conditions
            </summary>
            <param name="filter">The filter used to identify the items</param>
            <param name="cancellationToken"></param>
            <returns>
            Returns <c>true</c> if at least one item in the inventory matches the given
            filter, otherwise returns <c>false</c>
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the repository does not support filtering
            </exception>
            <exception cref="T:System.ArgumentException">
            Throw if the <paramref name="filter"/> is not supported by the repository
            </exception>
        </member>
        <member name="M:Deveel.Data.IFilterableRepository`1.CountAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)">
            <summary>
            Counts the number of items in the repository matching the given 
            filtering conditions
            </summary>
            <param name="filter">The filter used to identify the items</param>
            <param name="cancellationToken"></param>
            <remarks>
            Passing a <c>null</c> filter or passing <see cref="F:Deveel.Data.QueryFilter.Empty"/> as
            argument is equivalent to ask the repository not to use any filter, returning the 
            total count of all items int the inventory.
            </remarks>
            <returns>
            Returns the total count of items matching the given filtering conditions
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the repository does not support filtering
            </exception>
            <exception cref="T:System.ArgumentException">
            Throw if the <paramref name="filter"/> is not supported by the repository
            </exception>
        </member>
        <member name="M:Deveel.Data.IFilterableRepository`1.FindAsync(Deveel.Data.Query,System.Threading.CancellationToken)">
            <summary>
            Finds the first item in the repository that matches the given query
            </summary>
            <param name="query">
            The query definition used to identify the item to return
            and eventually sort the results.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation
            </param>
            <returns>
            Returns the first item in the repository that matches the given filtering condition,
            or <c>null</c> if none of the items matches the condition.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown if the repository does not support filtering
            </exception>
            <exception cref="T:System.ArgumentException">
            Throw if the <paramref name="query"/> defines a filter or a sort rule
            that is not supported by the repository
            </exception>
        </member>
        <member name="M:Deveel.Data.IFilterableRepository`1.FindAllAsync(Deveel.Data.Query,System.Threading.CancellationToken)">
            <summary>
            Finds all the items in the repository that match the given filtering condition
            </summary>
            <param name="query">
            The query definition used to identify the item to return
            and eventually sort the results.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation
            </param>
            <returns>
            Returns a list of items in the repository that match the given query,
            or an empty list if none of the items matches the condition.
            </returns>
        </member>
        <member name="T:Deveel.Data.IHaveTimeStamp">
            <summary>
            A contract for an object that has timestamps on the
            creation and update.
            </summary>
        </member>
        <member name="P:Deveel.Data.IHaveTimeStamp.CreatedAtUtc">
            <summary>
            Gets or sets the timestamp of the creation of the object.
            </summary>
        </member>
        <member name="P:Deveel.Data.IHaveTimeStamp.UpdatedAtUtc">
            <summary>
            Gets or sets the timestamp of the last update of the object.
            </summary>
        </member>
        <member name="T:Deveel.Data.IMultiTenantRepository`1">
            <summary>
            Represents a repository that is capable of segregating the
            data by the tenant that owns it.
            </summary>
        </member>
        <member name="P:Deveel.Data.IMultiTenantRepository`1.TenantId">
            <summary>
            Gets the identifier of the tenant that owns the data
            </summary>
        </member>
        <member name="T:Deveel.Data.IPageableRepository`1">
            <summary>
            Represents a repository that is capable of returning a page of items
            of the given type contained in the underlying storage.
            </summary>
            <typeparam name="TEntity">
            The strongly typed entity that is stored in the repository
            </typeparam>
        </member>
        <member name="M:Deveel.Data.IPageableRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)">
            <summary>
            Gets a page of items from the repository
            </summary>
            <param name="request">The request to obtain a given page from the repository. This
            object provides the number of the page, the size of the items to return, filters and
            sorting order.</param>
            <param name="cancellationToken"></param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.PageResult`1"/> that provides the
            page items and a count of total items.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if an error occurred while retrieving the page
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if the filters or the sorting capabilities are not provided by the
            implementation of the repository
            </exception>
            <seealso cref="T:Deveel.Data.PageResult`1"/>
        </member>
        <member name="T:Deveel.Data.IQueryableFilter`1">
            <summary>
            A filter that can be applied to a <see cref="T:System.Linq.IQueryable`1"/>
            object to restrict the results of a query.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Deveel.Data.IQueryableFilter`1.Apply(System.Linq.IQueryable{`0})">
            <summary>
            Applies the filter to the given queryable object.
            </summary>
            <param name="queryable">
            The queryable object to apply the filter to.
            </param>
            <returns>
            Returns an instance of <see cref="T:System.Linq.IQueryable`1"/> that
            is filtered by the conditions of this object.
            </returns>
        </member>
        <member name="T:Deveel.Data.IQueryableRepository`1">
            <summary>
            Represents a repository that is capable of being queried
            </summary>
            <typeparam name="TEntity">
            The strongly typed entity that is stored in the repository
            </typeparam>
        </member>
        <member name="M:Deveel.Data.IQueryableRepository`1.AsQueryable">
            <summary>
            Gets a queryable object that can be used to query the repository
            </summary>
            <returns>
            Returns an instance of <see cref="T:System.Linq.IQueryable`1"/> that can be used
            to query the repository.
            </returns>
        </member>
        <member name="T:Deveel.Data.IQueryableSort`1">
            <summary>
            A sorting rule that can be applied to a queryable
            object to sort the results.
            </summary>
            <typeparam name="TEntity">
            The type of entity to sort.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.IQueryableSort`1.Apply(System.Linq.IQueryable{`0})">
            <summary>
            Applies the sorting rule to the given <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
            <param name="queryable">
            The queryable object to sort.
            </param>
            <returns>
            Returns a <see cref="T:System.Linq.IQueryable`1"/> that
            is sorted by the rule.
            </returns>
        </member>
        <member name="T:Deveel.Data.IQueryFilter">
            <summary>
            A marker interface that is implemented by objects
            representing filters of a query to a repository
            </summary>
        </member>
        <member name="T:Deveel.Data.IRepositoryController">
            <summary>
            A service used to control the lifecycle of the repositories
            </summary>
        </member>
        <member name="M:Deveel.Data.IRepositoryController.CreateRepositoryAsync``1(System.Threading.CancellationToken)">
            <summary>
            Creates a repository for the given entity type
            </summary>
            <typeparam name="TEntity">
            The type of the entity managed by the repository
            </typeparam>
            <param name="cancellationToken">
            A token used to cancel the operation
            </param>
            <returns>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that can be used to await the operation
            </returns>
        </member>
        <member name="M:Deveel.Data.IRepositoryController.CreateTenantRepositoryAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a repository for the given entity type and tenant
            </summary>
            <typeparam name="TEntity">
            The type of the entity managed by the repository
            </typeparam>
            <param name="tenantId">
            The identifier of the tenant for which the repository is created
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation
            </param>
            <returns>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that can be used to await the operation
            </returns>
        </member>
        <member name="M:Deveel.Data.IRepositoryController.DropRepositoryAsync``1(System.Threading.CancellationToken)">
            <summary>
            Drops the repository for the given entity type
            </summary>
            <typeparam name="TEntity">
            The type of the entity managed by the repository
            </typeparam>
            <param name="cancellationToken">
            A token used to cancel the operation
            </param>
            <returns>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that can be used to await the operation
            </returns>
        </member>
        <member name="M:Deveel.Data.IRepositoryController.DropTenantRepositoryAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Drops the repository for the given entity type and tenant
            </summary>
            <typeparam name="TEntity">
            The type of the entity managed by the repository
            </typeparam>
            <param name="tenantId">
            The identifier of the tenant for which the repository is dropped
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation
            </param>
            <returns>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that can be used to await the operation
            </returns>
        </member>
        <member name="T:Deveel.Data.IRepositoryProvider`1">
            <summary>
            Represents an provider of strongly-typed repositories that
            are isolating the entities of a given tenant
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository instances
            </typeparam>
        </member>
        <member name="M:Deveel.Data.IRepositoryProvider`1.GetRepositoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a repository instance that is isolating the entities
            for a tenant.
            </summary>
            <param name="tenantId">
            The identifier of the tenant for which the repository is provided.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.IRepository`1"/> that
            is isolating the entities for the given tenant.
            </returns>
        </member>
        <member name="T:Deveel.Data.IRepository`1">
            <summary>
            The contract defining a repository of entities, accessible
            for read and write operations
            </summary>
            <typeparam name="TEntity">The type of entity handled by the repository</typeparam>
        </member>
        <member name="M:Deveel.Data.IRepository`1.GetEntityKey(`0)">
            <summary>
            Gets the unique identifier of the entity given
            </summary>
            <param name="entity">
            The instance of the entity to get the identifier of
            </param>
            <returns>
            Returns an object that is the unique identifier of the entity
            within the repository, or <c>null</c> if the entity is not
            identified.
            </returns>
        </member>
        <member name="M:Deveel.Data.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a new entity into the repository
            </summary>
            <param name="entity">The entity to be added</param>
            <param name="cancellationToken"></param>
            <returns>
            Returns a task that will complete when the operation is completed
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if it an error occurred while adding the entity
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the provided <paramref name="entity"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Deveel.Data.IRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Adds a list of entities in the repository in one single operation
            </summary>
            <param name="entities">The enumeration of the entities to be added</param>
            <param name="cancellationToken"></param>
            <remarks>
            <para>
            The operation is intended to be <c>all-or-nothing</c> fashion, where it
            will succeed only if all the items in the list will be created. Anyway, the
            underlying storage system might have persisted some of the items before a
            failure.
            </para>
            </remarks>
            <returns>
            Returns a task that will complete when the operation is completed
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if it an error occurred while adding one or more entities
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the provided list of <paramref name="entities"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Deveel.Data.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing entity in the repository
            </summary>
            <param name="entity">The entity instance to be updated</param>
            <param name="cancellationToken"></param>
            <returns>
            Returns <c>true</c> if the entity was found and updated in 
            the repository, otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the provided <paramref name="entity"/> is <c>null</c>
            </exception>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if it an error occurred while updating the entity
            </exception>
        </member>
        <member name="M:Deveel.Data.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an entity from the repository
            </summary>
            <param name="entity">The entity to be deleted</param>
            <param name="cancellationToken"></param>
            <returns>
            Returns <c>true</c> if the entity was successfully removed 
            from the repository, otherwise <c>false</c>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the provided <paramref name="entity"/> is <c>null</c>
            </exception>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if it an error occurred while removing the entity
            </exception>
        </member>
        <member name="M:Deveel.Data.IRepository`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Removes a list of entities from the repository in one 
            single operation.
            </summary>
            <param name="entities">
            The list of entities to be removed from the repository
            </param>
            <param name="cancellationToken">
            A token to cancel the operation
            </param>
            <returns>
            Returns a task that will complete when the operation is completed
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if it an error occurred while removing one or more entities
            </exception>
        </member>
        <member name="M:Deveel.Data.IRepository`1.FindByKeyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Attempts to find in the repository an entity with the 
            given unique identifier
            </summary>
            <param name="key">The unique identifier of the entity to find</param>
            <param name="cancellationToken"></param>
            <returns>
            Returns the instance of the entity associated to the given <paramref name="key"/>,
            or <c>null</c> if none entity was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the provided <paramref name="key"/> is <c>null</c>
            </exception>
        </member>
        <member name="T:Deveel.Data.ISort">
            <summary>
            Defines a sorting rule to apply to the results
            of a query.
            </summary>
        </member>
        <member name="T:Deveel.Data.ISystemTime">
            <summary>
            A service that provides the current system time.
            </summary>
        </member>
        <member name="P:Deveel.Data.ISystemTime.UtcNow">
            <summary>
            Gets the current system time in UTC.
            </summary>
        </member>
        <member name="P:Deveel.Data.ISystemTime.Now">
            <summary>
            Gets the current local system time.
            </summary>
        </member>
        <member name="T:Deveel.Data.PageableRepositoryExtensions">
            <summary>
            Defines a set of extension methods for the <see cref="T:Deveel.Data.IPageableRepository`1"/>
            that allows to retrieve a page of entities from the repository.
            </summary>
        </member>
        <member name="M:Deveel.Data.PageableRepositoryExtensions.GetPageAsync``1(Deveel.Data.IPageableRepository{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a page of entities from the repository,
            given a page number and a page size
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository from which the entities are retrieved.
            </param>
            <param name="page">
            The number of the page to retrieve from the repository.
            </param>
            <param name="size">
            The size of the page to retrieve from the repository.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <remarks>
            This method is a shortcut for the invocation of
            <see cref="M:Deveel.Data.IPageableRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)"/>,
            without filtering and sorting.
            </remarks>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.PageResult`1"/> that
            is the result of the query.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the given page number is less than 1, or
            if the given page size is less than 0.
            </exception>
        </member>
        <member name="M:Deveel.Data.PageableRepositoryExtensions.GetPage``1(Deveel.Data.IPageableRepository{``0},Deveel.Data.PageQuery{``0})">
            <summary>
            Gets a page of entities from the repository,
            given the request object that defines the scope
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository from which the entities are retrieved.
            </param>
            <param name="request">
            The request object that defines the scope of the page to retrieve.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.PageResult`1"/> that
            is the result of the query.
            </returns>
        </member>
        <member name="T:Deveel.Data.PageQuery`1">
            <summary>
            Describes the request to obtain a page of a given size
            from a repository
            </summary>
            <typeparam name="TEntity"></typeparam>
            <seealso cref="M:Deveel.Data.IPageableRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new page request with the given page number and size
            </summary>
            <param name="page">
            The number of the page to request
            </param>
            <param name="size">
            The maximum size of the page to return.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If either the page number or the page size are smaller than 1.
            </exception>
        </member>
        <member name="P:Deveel.Data.PageQuery`1.Page">
            <summary>
            Gets the number of the page to return
            </summary>
        </member>
        <member name="P:Deveel.Data.PageQuery`1.Size">
            <summary>
            Gets the maximum number of items to be returned.
            </summary>
        </member>
        <member name="P:Deveel.Data.PageQuery`1.Offset">
            <summary>
            Gets the starting offet in the repository where to start
            collecting the items to return
            </summary>
        </member>
        <member name="P:Deveel.Data.PageQuery`1.Query">
            <summary>
            The query that is applied to the request
            </summary>
        </member>
        <member name="P:Deveel.Data.PageQuery`1.Filter">
            <summary>
            When the request has a query defined, gets the filter
            that is applied to the request.
            </summary>
        </member>
        <member name="P:Deveel.Data.PageQuery`1.Sort">
            <summary>
            When the request has a query defined, gets the sort
            rule that is applied to the request.
            </summary>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sets or appends a new filter
            </summary>
            <param name="expression">The filter expression to add</param>
            <returns>
            Returns this page request with the new filter
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="expression"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Appends an ascending sort rule to the page request
            </summary>
            <param name="selector">
            The expression that selects the field to sort by.
            </param>
            <returns>
            Returns this instance of the page request with the
            appended sort rule.
            </returns>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Appends a descending sort rule to the page request
            </summary>
            <param name="selector">
            The expression that selects the field to sort by.
            </param>
            <returns>
            Returns this instance of the page request with the
            appended sort rule.
            </returns>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.OrderBy(Deveel.Data.ISort)">
            <summary>
            Appends the given sort order to the request
            </summary>
            <param name="sort">
            The 
            </param>
            <returns></returns>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.OrderBy(System.String,Deveel.Data.SortDirection)">
            <summary>
            Appends an order by the given field name
            </summary>
            <param name="fieldName">
            The name of the field to sort by
            </param>
            <param name="direction">
            The sort direction to order by.
            </param>
            <returns>
            Returns this instance of the page request with the
            appended sort rule.
            </returns>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.OrderByDescending(System.String)">
            <summary>
            Appends a descending sort rule to the page request.
            </summary>
            <param name="fieldName">
            The name of the field to sort by.
            </param>
            <returns>
            Returns this instance of the page request with the
            appended sort rule.
            </returns>
        </member>
        <member name="M:Deveel.Data.PageQuery`1.ApplyQuery(System.Linq.IQueryable{`0})">
            <summary>
            Applies the query to the given <see cref="T:System.Linq.IQueryable`1"/>,
            if this page request has a query defined.
            </summary>
            <param name="queryable">
            The queryable to apply the query to.
            </param>
            <returns>
            Returns a <see cref="T:System.Linq.IQueryable`1"/> that is the result
            of the application of the query to the given queryable.
            </returns>
        </member>
        <member name="T:Deveel.Data.PageResult`1">
            <summary>
            The strongly typed page from a repository, obtained from 
            a paginated query
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <seealso cref="T:Deveel.Data.PageQuery`1"/>
            <seealso cref="M:Deveel.Data.IPageableRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.PageResult`1.#ctor(Deveel.Data.PageQuery{`0},System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs the result referencing the original request, a count
            of the items in the repository and optionally a list of items in the page
            </summary>
            <param name="request">The original page request</param>
            <param name="totalItems">The total number of items in the context
            of the request given (filtered and sorted).</param>
            <param name="items">The list of items included in the page</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the number of total items is smaller than zero.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="request"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Deveel.Data.PageResult`1.Request">
            <summary>
            Gets a reference to the request
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.TotalItems">
            <summary>
            Gets a count of the total items in the repository
            for the context of the request
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.Items">
            <summary>
            Gets a list of items included in the page
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.TotalPages">
            <summary>
            Gets a count of the total available pages
            that can be requested from the repository
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.IsFirstPage">
            <summary>
            Gets a value indicating if the current page is the first
            in the context of the request
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.IsLastPage">
            <summary>
            Gets a value indicating if the current page is the last
            in the context of the request
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.HasNextPage">
            <summary>
            Gets a value indicating if there is a next page
            in the context of the request
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.HasPreviousPage">
            <summary>
            Gets a value indicating if there is a previous page
            in the context of the request
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.NextPage">
            <summary>
            When there is a next page, gets the number of the next page
            in the context of the request, or <c>null</c> if there is no
            page after the current one.
            </summary>
        </member>
        <member name="P:Deveel.Data.PageResult`1.PreviousPage">
            <summary>
            When there is a previous page, gets the number of the previous page
            in the context of the request, or <c>null</c> if there is no
            page before the current one.
            </summary>
        </member>
        <member name="M:Deveel.Data.PageResult`1.Empty(Deveel.Data.PageQuery{`0})">
            <summary>
            Creates an empty page response to the given request
            </summary>
            <param name="page">
            The request that originated the page
            </param>
            <returns>
            Returns a new instance of <see cref="T:Deveel.Data.PageResult`1"/> that
            represents an empty page.
            </returns>
        </member>
        <member name="T:Deveel.Data.Query">
            <summary>
            A query that can be applied to a repository
            to filter and sort the results.
            </summary>
        </member>
        <member name="M:Deveel.Data.Query.#ctor(Deveel.Data.IQueryFilter,Deveel.Data.ISort)">
            <summary>
            Constructs the query with the given filter and sort.
            </summary>
            <param name="filter">
            The filter to apply to the query.
            </param>
            <param name="sort">
            An optional sort to apply to the query.
            </param>
        </member>
        <member name="P:Deveel.Data.Query.Filter">
            <summary>
            Gets the filter to apply to the query.
            </summary>
        </member>
        <member name="P:Deveel.Data.Query.HasFilter">
            <summary>
            Gets a value indicating if the query has a filter.
            </summary>
        </member>
        <member name="P:Deveel.Data.Query.Sort">
            <summary>
            Gets the sort to apply to the results
            of the query.
            </summary>
        </member>
        <member name="P:Deveel.Data.Query.Empty">
            <summary>
            Represents an empty query, that will apply
            no filter and no sort.
            </summary>
        </member>
        <member name="M:Deveel.Data.Query.Apply``1(System.Linq.IQueryable{``0})">
            <summary>
            Applies the query to the given <see cref="T:System.Linq.IQueryable`1"/>
            to filter and sort the results.
            </summary>
            <typeparam name="TEntity">
            The type of entity to apply the query to.
            </typeparam>
            <param name="queryable">
            The queryable to apply the query to.
            </param>
            <returns>
            Returns the <see cref="T:System.Linq.IQueryable`1"/> that was
            filtered and sorted.
            </returns>
        </member>
        <member name="T:Deveel.Data.QueryableExtensions">
            <summary>
            Extends instances of <see cref="T:System.Linq.IQueryable`1"/> to 
            provide filtering capabilities.
            </summary>
        </member>
        <member name="M:Deveel.Data.QueryableExtensions.LongCount``1(System.Linq.IQueryable{``0},Deveel.Data.IQueryFilter)">
            <summary>
            Counts the number of entities that match the filter.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to count.
            </typeparam>
            <param name="queriable">
            The queryable object to count the entities from.
            </param>
            <param name="filter">
            The filter to apply to the query.
            </param>
            <returns>
            Returns the number of entities that match the given filter.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the queryable or the filter are <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.QueryableExtensions.ToList``1(System.Linq.IQueryable{``0},Deveel.Data.IQueryFilter)">
            <summary>
            Lists all the entities that match the given filter.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to list.
            </typeparam>
            <param name="queriable">
            The queryable object to list the entities from.
            </param>
            <param name="filter">
            The filter to apply to the query.
            </param>
            <returns>
            Returns a list of entities that match the given filter.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the queryable or the filter are <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.QueryableExtensions.FirstOrDefault``1(System.Linq.IQueryable{``0},Deveel.Data.IQueryFilter)">
            <summary>
            Returns the first entity that matches the given filter.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to find.
            </typeparam>
            <param name="queryable">
            The queryable object to find the entity from.
            </param>
            <param name="filter">
            The filter to apply to the query.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/> that
            matched the given filter, or <c>null</c> if no entity is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the queryable or the filter are <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.QueryableExtensions.Any``1(System.Linq.IQueryable{``0},Deveel.Data.IQueryFilter)">
            <summary>
            Checks if there are any entities that match the given filter.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to check.
            </typeparam>
            <param name="queryable">
            The queryable object to check the entities from.
            </param>
            <param name="filter">
            The filter to apply to the query.
            </param>
            <returns>
            Returns <c>true</c> if there are entities that match the given filter,
            otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the queryable or the filter are <c>null</c>.
            </exception>
        </member>
        <member name="T:Deveel.Data.QueryableRepositoryExtensions">
            <summary>
            Extends the <see cref="T:Deveel.Data.IQueryableRepository`1"/> interface
            to provide methods to query the repository.
            </summary>
        </member>
        <member name="M:Deveel.Data.QueryableRepositoryExtensions.GetPage``1(Deveel.Data.IQueryableRepository{``0},Deveel.Data.PageQuery{``0})">
            <summary>
            Gets a page of entities from the repository,
            given a request object that defines the scope
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository from which the entities are retrieved.
            </param>
            <param name="request">
            The request object that defines the scope of the page to retrieve.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.PageResult`1"/> that
            is the result of the query.
            </returns>
        </member>
        <member name="T:Deveel.Data.QueryFilter">
            <summary>
            A utility class that provides a set of static methods to create
            default types of query filters.
            </summary>
        </member>
        <member name="F:Deveel.Data.QueryFilter.Empty">
            <summary>
            Identifies an empty query filter, that implementations
            of the <see cref="T:Deveel.Data.IFilterableRepository`1"/> can use to
            convert to a default query.
            </summary>
        </member>
        <member name="M:Deveel.Data.QueryFilter.IsEmpty(Deveel.Data.IQueryFilter)">
            <summary>
            Determines if the given filter is the empty one.
            </summary>
            <param name="filter">
            The filter to check if it is the empty one.
            </param>
            <remarks>
            The method verifies if the reference of the given filter
            if the same of the <see cref="F:Deveel.Data.QueryFilter.Empty"/> one.
            </remarks>
            <returns>
            Returns <c>true</c> if the given filter is the empty one,
            or <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Deveel.Data.QueryFilter.AsLambda``1(Deveel.Data.IQueryFilter)">
            <summary>
            Converts the given filter to a LINQ expression that can be
            used to filter a <see cref="T:System.Linq.IQueryable`1"/> storage
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="filter">
            The instance of the filter to convert to a LINQ expression.
            </param>
            <remarks>
            If the given filter is the empty one, the method returns
            a lambda expression that always returns <c>true</c>.
            </remarks>
            <returns>
            Returns an instance of <see cref="T:System.Linq.Expressions.Expression`1"/> that
            is obtained from the conversion of the given filter.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given filter is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the given filter is not an instance of <see cref="T:Deveel.Data.ExpressionQueryFilter`1"/>.
            </exception>
        </member>
        <member name="M:Deveel.Data.QueryFilter.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Constructs a new query filter that is built from the given
            LINQ expression.
            </summary>
            <typeparam name="TEntity">
            The type of the entity that is the target of the filter.
            </typeparam>
            <param name="exp">
            The lambda expression that defines the filter.
            </param>
            <remarks>
            Various implementations of <see cref="T:Deveel.Data.IFilterableRepository`1"/> can support
            LINQ expressions to define the filter to apply to the query, and this
            method provides a factory to create a default implementation of
            this kind of filter.
            </remarks>
            <returns>
            Returns a new instance of <see cref="T:Deveel.Data.ExpressionQueryFilter`1"/>
            wrapping the given expression.
            </returns>
        </member>
        <member name="M:Deveel.Data.QueryFilter.Apply``1(Deveel.Data.IQueryFilter,System.Linq.IQueryable{``0})">
            <summary>
            Applies the filter to the given queryable object, producing
            a result that is the filtered query.
            </summary>
            <typeparam name="TEntity">
            The type of the entity that is the target of the filter.
            </typeparam>
            <param name="filter">
            The filter to apply to the query.
            </param>
            <param name="queryable">
            The queryable object to filter.
            </param>
            <returns>
            Returns an instance of <see cref="T:System.Linq.IQueryable`1"/> that is
            the result of the application of the given filter to the queryable.
            </returns>
        </member>
        <member name="M:Deveel.Data.QueryFilter.Combine(System.Collections.Generic.IEnumerable{Deveel.Data.IQueryFilter})">
            <summary>
            Combines the list of filters into a single one.
            </summary>
            <param name="filters">
            The list of filters to combine.
            </param>
            <returns>
            Returns a <see cref="T:Deveel.Data.IQueryFilter"/> that is the result of the
            combination of the given filters.
            </returns>
        </member>
        <member name="M:Deveel.Data.QueryFilter.Combine(Deveel.Data.IQueryFilter[])">
            <summary>
            Combines the list of filters into a single one.
            </summary>
            <param name="filters">
            The list of filters to combine.
            </param>
            <returns>
            Returns a <see cref="T:Deveel.Data.IQueryFilter"/> that is the result of the
            combination of the given filters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given list of filters is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the given list of filters is empty.
            </exception>
        </member>
        <member name="M:Deveel.Data.QueryFilter.Combine(Deveel.Data.IQueryFilter,Deveel.Data.IQueryFilter)">
            <summary>
            Combines the two filters into a single one.
            </summary>
            <param name="filter1">
            The first filter to combine.
            </param>
            <param name="filter2">
            The second filter to combine.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the given filters is <c>null</c>.
            </exception>
        </member>
        <member name="T:Deveel.Data.ReflectionFieldMapper`1">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IFieldMapper`1"/> that
            uses reflection to map a field name to a member of the entity.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Deveel.Data.ReflectionFieldMapper`1.MapField(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.RepositoryControllerOptions">
            <summary>
            Provides a set of options that can be used to control
            the behavior of a <see cref="T:Deveel.Data.IRepositoryController"/>.
            </summary>
        </member>
        <member name="P:Deveel.Data.RepositoryControllerOptions.DeleteIfExists">
            <summary>
            Instructs the controller to delete pre-existing repositories,
            or otherwise fail
            </summary>
        </member>
        <member name="P:Deveel.Data.RepositoryControllerOptions.IgnoreNotControllable">
            <summary>
            Skips any operation if the repository is not controllable
            </summary>
        </member>
        <member name="P:Deveel.Data.RepositoryControllerOptions.DontCreateExisting">
            <summary>
            Instructs the controller to not create a
            repository if already exists
            </summary>
        </member>
        <member name="T:Deveel.Data.RepositoryException">
            <summary>
            An exception that is thrown during the execution
            of an operation on the repository
            </summary>
        </member>
        <member name="M:Deveel.Data.RepositoryException.#ctor">
            <summary>
            Constructs an empty instance of the <see cref="T:Deveel.Data.RepositoryException"/> class.
            </summary>
        </member>
        <member name="M:Deveel.Data.RepositoryException.#ctor(System.String)">
            <summary>
            Constructs an instance of the <see cref="T:Deveel.Data.RepositoryException"/> class
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:Deveel.Data.RepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an instance of the <see cref="T:Deveel.Data.RepositoryException"/> class
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
            <param name="innerException">
            An exception that is the cause of the current exception.
            </param>
        </member>
        <member name="T:Deveel.Data.RepositoryExtensions">
            <summary>
            Extends the functionalities of a repository instance
            to provide a set of utility methods to perform common operations
            </summary>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.AsFilterable``1(Deveel.Data.IRepository{``0})">
            <summary>
            Gets a version of the repository that is filterable
            </summary>
            <typeparam name="TEntity">
            The type of entity to filter
            </typeparam>
            <param name="repository">
            The instance of the repository to get the filterable version.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.IFilterableRepository`1"/>
            that can be used to filter the entities in the repository.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository is not filterable
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.AsQueryable``1(Deveel.Data.IRepository{``0})">
            <summary>
            Gets a version of the repository that is queryable.
            </summary>
            <typeparam name="TEntity">
            The type of entity to query
            </typeparam>
            <param name="repository">
            The instance of the repository to get the queryable version.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.IQueryableRepository`1"/>
            if the repository is queryable, otherwise it throws an exception.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository is not queryable
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.Add``1(Deveel.Data.IRepository{``0},``0)">
            <summary>
            Adds a new entity in the repository synchronously
            </summary>
            <typeparam name="TEntity">
            The type of entity to add
            </typeparam>
            <param name="repository">
            The instance of the repository to use to create the entity
            </param>
            <param name="entity">
            The instance of the entity to create
            </param>
            <returns>
            Returns a string that uniquely identifies the created entity
            within the underlying storage.
            </returns>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.Remove``1(Deveel.Data.IRepository{``0},``0)">
            <summary>
            Removes an entity from the repository synchronously
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository
            </typeparam>
            <param name="repository">
            The instance of the repository from which the entity is removed
            </param>
            <param name="entity">
            The instance of the entity to remove
            </param>
            <returns>
            Returns <c>true</c> if the entity was removed successfully,
            otherwise <c>false</c>.
            </returns>
            <seealso cref="M:Deveel.Data.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.RemoveByKeyAsync``1(Deveel.Data.IRepository{``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Removes an entity, identified by the given key,
            from the repository
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository
            </typeparam>
            <param name="repository">
            The instance of the repository from which the entity is removed
            </param>
            <param name="key">
            The key that uniquely identifies the entity to remove
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <returns>
            Returns <c>true</c> if the entity was removed successfully,
            otherwise it returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.RemoveByKey``1(Deveel.Data.IRepository{``0},System.Object)">
            <summary>
            Synchronously removes an entity, identified by the given key,
            from the repository
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository from which the entity is removed.
            </param>
            <param name="key">
            The key that uniquely identifies the entity to remove.
            </param>
            <returns>
            Returns <c>true</c> if the entity was removed successfully,
            otherwise it returns <c>false</c>.
            </returns>
            <seealso cref="M:Deveel.Data.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.Update``1(Deveel.Data.IRepository{``0},``0)">
            <summary>
            Updates an entity in the repository synchronously
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository
            </typeparam>
            <param name="repository">
            The instance of the repository from which the entity is updated
            </param>
            <param name="entity">
            The instance of the entity to update
            </param>
            <returns>
            Returns <c>true</c> if the entity was updated successfully,
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.GetPageAsync``1(Deveel.Data.IRepository{``0},Deveel.Data.PageQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Gets a page of entities from the repository,
            given a request object that defines the scope
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="repository"></param>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <remarks>
            <para>
            This method attempts to cast the given repository to a
            <see cref="T:Deveel.Data.IPageableRepository`1"/> and invoke the
            native method <see cref="M:Deveel.Data.IPageableRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)"/>.
            </para>
            <para>
            If the repository does not implement the interface, the method
            attempts to cast it to a <see cref="T:Deveel.Data.IQueryableRepository`1"/>
            and invoke the a paging operation on the <see cref="T:System.Linq.IQueryable`1"/>.
            </para>
            </remarks>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.PageResult`1"/> that
            represents the result of the query.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support paging.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.GetPageAsync``1(Deveel.Data.IRepository{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a page of entities from the repository, given
            the page number and the size
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to retrieve the page.
            </param>
            <param name="page">
            The number of the page, starting from 1, to retrieve from the repository.
            </param>
            <param name="size">
            The size of the page to retrieve from the repository.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.PageResult`1"/> that
            represents the result of the query.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support paging.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the given page number is less than 1, or the given
            size is less than zero.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.GetPage``1(Deveel.Data.IRepository{``0},Deveel.Data.PageQuery{``0})">
            <summary>
            Gets a page of entities from the repository, given
            the query object that defines the scope
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to retrieve the page.
            </param>
            <param name="query">
            The query object that defines the scope of the page to retrieve
            </param>
            <remarks>
            <para>
            This method attempts to cast the given repository to a
            <see cref="T:Deveel.Data.IPageableRepository`1"/> and invoke the
            native method <see cref="M:Deveel.Data.IPageableRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)"/>.
            </para>
            <para>
            If the repository does not implement the interface, the method
            attempts to cast it to a <see cref="T:Deveel.Data.IQueryableRepository`1"/>
            and invoke the a paging operation on the <see cref="T:System.Linq.IQueryable`1"/>.
            </para>
            </remarks>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.PageResult`1"/> that
            represents the paged result of the query.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support paging or querying.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.ExistsAsync``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Checks if an entity exists in the repository,
            that matches the given filter
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to check the existence 
            of any entity that matches the given filter.
            </param>
            <param name="filter">
            The filtering expression to use to check the existence of
            any matching entity.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <returns>
            Returns <c>true</c> if any entity exists in the repository
            that matches the given filter, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.ExistsAsync``1(Deveel.Data.IRepository{``0},Deveel.Data.IQueryFilter,System.Threading.CancellationToken)">
            <summary>
            Checks if an entity exists in the repository,
            that matches the given filter
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to check the existence
            of any entity that matches the given filter.
            </param>
            <param name="filter">
            The filter used to check the existence of any matching entity.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <remarks>
            <para>
            This method attempts to cast the given repository to a
            <see cref="T:Deveel.Data.IFilterableRepository`1"/> to invoke the
            native method <see cref="M:Deveel.Data.IFilterableRepository`1.ExistsAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)"/>.
            </para>
            <para>
            When the repository does not implement the interface, the method
            attempts to cast it to a <see cref="T:Deveel.Data.IQueryableRepository`1"/>
            to invoke the a query operation on the <see cref="T:System.Linq.IQueryable`1"/>.
            </para>
            </remarks>
            <returns>
            Returns <c>true</c> if any entity exists in the repository,
            or <c>false</c> if not.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support querying or filtering.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.Exists``1(Deveel.Data.IRepository{``0},Deveel.Data.IQueryFilter)">
            <summary>
            Synchronously checks if an entity exists in the repository,
            that matches the given filter
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to check the existence
            of any entity that matches the given filter.
            </param>
            <param name="filter">
            The filter used to check the existence of any matching entity.
            </param>
            <returns>
            Returns <c>true</c> if any entity exists in the repository
            that matches the given filter, otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support querying or filtering.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.Exists``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Synchronously checks if an entity exists in the repository,
            given a filter expression
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to check the existence
            of any entity that matches the given filter.
            </param>
            <param name="filter">
            The filter expression used to check the existence of any matching entity.
            </param>
            <returns>
            Returns <c>true</c> if any entity exists in the repository,
            otherwise it returns <c>false</c>.
            </returns>
            <seealso cref="M:Deveel.Data.IFilterableRepository`1.ExistsAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.CountAsync``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts the number of entities in the repository,
            given a filter expression
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to count the entities.
            </param>
            <param name="filter">
            A filter expression used to count the matching entities.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <returns>
            Returns the number of entities in the repository that match
            the given filter.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support querying or filtering.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.CountAllAsync``1(Deveel.Data.IRepository{``0},System.Threading.CancellationToken)">
            <summary>
            Counts the number of entities in the repository
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to count the entities.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <returns>
            Returns the number of entities in the repository.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support querying or filtering.
            </exception>
            <seealso cref="M:Deveel.Data.IFilterableRepository`1.CountAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.Count``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Counts the number of entities in the repository,
            given a filter expression to match.
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to count the entities.
            </param>
            <param name="filter">
            The filter used to count the matching entities.
            </param>
            <returns>
            Returns the number of entities in the repository that match
            the given filter.
            </returns>
            <seealso cref="M:Deveel.Data.RepositoryExtensions.CountAsync``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.CountAll``1(Deveel.Data.IRepository{``0})">
            <summary>
            Counts the number of entities in the repository
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to count the entities.
            </param>
            <returns>
            Returns the number of entities in the repository.
            </returns>
            <seealso cref="M:Deveel.Data.RepositoryExtensions.CountAllAsync``1(Deveel.Data.IRepository{``0},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.FindByKey``1(Deveel.Data.IRepository{``0},System.Object)">
            <summary>
            Finds a single entity in the repository, given the key
            that uniquely identifies it
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The instance of the repository to use to find the entity.
            </param>
            <param name="key">
            The key that uniquely identifies the entity to find.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/> that
            is identified by the given key, or <c>null</c> if no entity
            with the given key exists in the repository.
            </returns>
            <seealso cref="M:Deveel.Data.IRepository`1.FindByKeyAsync(System.Object,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.FindFirstAsync``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Finds the first entity in the repository that matches
            the given filter expression
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The repository instance to use to find the entity.
            </param>
            <param name="filter">
            The filter expression used to find the entity.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/> that
            can be identified by the given filter, or <c>null</c> if no
            entity matches the given filter.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support filtering.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.FindFirstAsync``1(Deveel.Data.IRepository{``0},System.Threading.CancellationToken)">
            <summary>
            Finds the first entity in the repository, naturally ordered.
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The repository instance to use to find the entity.
            </param>
            <param name="cancellationToken">
            A token used to cancel the operation.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/> that
            is the first entity in the repository, or <c>null</c> if the
            repository is empty.
            </returns>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.FindFirst``1(Deveel.Data.IRepository{``0},Deveel.Data.IQueryFilter)">
            <summary>
            Finds the first entity in the repository that matches
            the given filter expression
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The repository instance to use to find the entity.
            </param>
            <param name="filter">
            The filter expression used to find the entity.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/> that
            can be identified by the given filter, or <c>null</c> if no
            entity matches the given filter.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the repository does not support filtering.
            </exception>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.FindFirst``1(Deveel.Data.IRepository{``0})">
            <summary>
            Finds the first entity in the repository, naturally ordered.
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="repository">
            The repository instance to use to find the entity.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/> that
            is the first entity in the repository, or <c>null</c> if the
            repository is empty.
            </returns>
        </member>
        <member name="T:Deveel.Data.RepositoryProviderExtensions">
            <summary>
            Extends the <see cref="T:Deveel.Data.IRepositoryProvider`1"/> interface
            with further methods to resolve a repository.
            </summary>
            <seealso cref="T:Deveel.Data.IRepositoryProvider`1"/>
        </member>
        <member name="M:Deveel.Data.RepositoryProviderExtensions.GetRepository``1(Deveel.Data.IRepositoryProvider{``0},System.String)">
            <summary>
            Synchronously resolves the repository for the given tenant.
            </summary>
            <typeparam name="TEntity">
            The type of entity handled by the repository.
            </typeparam>
            <param name="provider">
            The instance of the provider that resolves the repository.
            </param>
            <param name="tenantId">
            The identifier of the tenant for which the repository is resolved.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.IRepository`1"/> that
            is isolated for the given tenant.
            </returns>
        </member>
        <member name="T:Deveel.Data.ServiceCollectionExtensions">
            <summary>
            Extensions for the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register
            repositories and providers.
            </summary>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddRepository``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a repository of the given type in the service collection.
            </summary>
            <typeparam name="TRepository">
            The type of the repository to register.
            </typeparam>
            <param name="services">
            The service collection to register the repository.
            </param>
            <param name="lifetime">
            The lifetime of the repository in the service collection.
            </param>
            <returns>
            Returns the same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to allow chaining.
            </returns>
            <seealso cref="M:Deveel.Data.ServiceCollectionExtensions.AddRepository(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)"/>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddRepository(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a repository of the given type in the service collection.
            </summary>
            <param name="services">
            The service collection to register the repository.
            </param>
            <param name="repositoryType">
            The type of the repository to register.
            </param>
            <param name="lifetime">
            the lifetime of the repository in the service collection.
            </param>
            <returns>
            Returns the same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to allow chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the given <paramref name="repositoryType"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the given <paramref name="repositoryType"/> is not
            a class or is abstract.
            </exception>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when the given <paramref name="repositoryType"/> is not a valid
            repository type.
            </exception>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddRepositoryProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers a repository provider of the given type in 
            the service collection.
            </summary>
            <param name="services">
            The service collection to register the repository provider.
            </param>
            <param name="providerType">
            The type of the repository provider to register, that
            must implement <see cref="T:Deveel.Data.IRepositoryProvider`1"/>.
            </param>
            <param name="lifetime">
            The lifetime of the repository provider in the service collection.
            </param>
            <returns>
            Returns the same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to allow chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the given <paramref name="providerType"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the given <paramref name="providerType"/> is not
            implementing <see cref="T:Deveel.Data.IRepositoryProvider`1"/>.
            </exception>
            <exception cref="T:Deveel.Data.RepositoryException"></exception>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddSystemTime``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers a singleton <see cref="T:Deveel.Data.ISystemTime"/> service of the
            given <typeparamref name="TTime"/> type.
            </summary>
            <typeparam name="TTime">
            The type of the <see cref="T:Deveel.Data.ISystemTime"/> implementation.
            </typeparam>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the service to.
            </param>
            <returns>
            Returns the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.
            </returns>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddSystemTime``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)">
            <summary>
            Registers a singleton instance of <see cref="T:Deveel.Data.ISystemTime"/> of the
            given <typeparamref name="TTime"/> type.
            </summary>
            <typeparam name="TTime">
            The type of the <see cref="T:Deveel.Data.ISystemTime"/> implementation.
            </typeparam>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the service to.
            </param>
            <param name="time">
            The instance of <typeparamref name="TTime"/> to register.
            </param>
            <returns>
            Returns the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls
            can be chained.
            </returns>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddSystemTime(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the default <see cref="T:Deveel.Data.ISystemTime"/> service implementation
            </summary>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the service to.
            </param>
            <returns>
            Returns the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.
            </returns>
        </member>
        <member name="T:Deveel.Data.Sort">
            <summary>
            A utility class that provides methods to create
            sort rules to apply to a query.
            </summary>
        </member>
        <member name="M:Deveel.Data.Sort.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Deveel.Data.SortDirection)">
            <summary>
            Creates a sort rule that will order the results
            of a query by the given field.
            </summary>
            <typeparam name="TEntity">
            The type of entity of a collection that is the target
            of the sorting and that defines the field to select.
            </typeparam>
            <param name="field">
            The expression that selects the field to sort.
            </param>
            <param name="direction">
            The direction of the sorting (by default is ascending).
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.ExpressionSort`1"/>
            that represents the sorting rule.
            </returns>
        </member>
        <member name="M:Deveel.Data.Sort.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates a sort rule that will order the results
            of a query by the given field in descending order.
            </summary>
            <typeparam name="TEntity">
            The type of entity of a collection that is the target
            of the sorting and that defines the field to select.
            </typeparam>
            <param name="field">
            The expression that selects the field to sort.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.ExpressionSort`1"/>
            that represents the sorting rule.
            </returns>
        </member>
        <member name="M:Deveel.Data.Sort.OrderBy(System.String,Deveel.Data.SortDirection)">
            <summary>
            Creates a sort rule that will order the results
            by the given field name.
            </summary>
            <param name="fieldName">
            The name of the field to sort by.
            </param>
            <param name="direction">
            The direction of the sorting (by default is ascending).
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.FieldSort"/> that
            represents the sorting rule.
            </returns>
            <seealso cref="M:Deveel.Data.FieldSort.#ctor(System.String,Deveel.Data.SortDirection)"/>
        </member>
        <member name="M:Deveel.Data.Sort.OrderByDescending(System.String)">
            <summary>
            Creates a sort rule that will order the results
            of a query by the given field in descending order.
            </summary>
            <param name="fieldName">
            The name of the field to sort by.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.FieldSort"/> that
            represents the sorting rule.
            </returns>
            <seealso cref="M:Deveel.Data.FieldSort.#ctor(System.String,Deveel.Data.SortDirection)"/>
        </member>
        <member name="M:Deveel.Data.Sort.Combine(Deveel.Data.ISort,Deveel.Data.ISort)">
            <summary>
            Combines the given sort rules into a single
            object that represents the combination of the rules.
            </summary>
            <param name="sort">
            The first sort rule to combine.
            </param>
            <param name="other">
            The second sort rule to combine.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.CombinedSort"/> that
            represents the combination of the given rules.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either of the given sort rules is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.Sort.IsAscending(Deveel.Data.ISort)">
            <summary>
            Determines if the given sort rule is ascending.
            </summary>
            <param name="sort">
            The sort rule to check.
            </param>
            <returns>
            Returns <c>true</c> if the given sort rule is ascending,
            or <c>false</c> if it is descending or not directional.
            </returns>
        </member>
        <member name="M:Deveel.Data.Sort.IsDescending(Deveel.Data.ISort)">
            <summary>
            Determines if the given sort rule is descending.
            </summary>
            <param name="sort">
            The sort rule to check.
            </param>
            <returns>
            Returns <c>true</c> if the given sort rule is descending,
            or <c>false</c> if it is ascending or not directional.
            </returns>
        </member>
        <member name="M:Deveel.Data.Sort.Apply``1(Deveel.Data.ISort,System.Linq.IQueryable{``0},System.Func{System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Applies the given sort rule to the given queryable
            object that represents a query.
            </summary>
            <typeparam name="TEntity">
            The type of entity of a collection that is the target
            of the sorting.
            </typeparam>
            <param name="sort">
            The sort rule or combination of rules to apply.
            </param>
            <param name="queryable">
            The queryable object to sort.
            </param>
            <param name="fieldMapper">
            An optional field mapper to use to map the field names
            defined by <see cref="T:Deveel.Data.FieldSort"/> instances to expressions
            that select the field to sort.
            </param>
            <returns>
            Returns the <see cref="T:System.Linq.IQueryable`1"/> that was
            sorted by the given rule.
            </returns>
        </member>
        <member name="M:Deveel.Data.Sort.Apply``1(Deveel.Data.ISort,System.Linq.IQueryable{``0},Deveel.Data.IFieldMapper{``0})">
            <summary>
            Applies the given sort rule to the given queryable
            object that represents a query.
            </summary>
            <typeparam name="TEntity">
            The type of entity of a collection that is the target
            of the sorting.
            </typeparam>
            <param name="sort">
            The sort rule or combination of rules to apply.
            </param>
            <param name="queryable">
            The queryable object to sort.
            </param>
            <param name="fieldMapper">
            An optional field mapper to use to map the field names
            defined by <see cref="T:Deveel.Data.FieldSort"/> instances to expressions
            that select the field to sort. When not specified, reflection 
            is used to map the field names from the members of the type.
            </param>
            <returns>
            Returns the <see cref="T:System.Linq.IQueryable`1"/> that was
            the result of the application of the given sort rule.
            </returns>
        </member>
        <member name="T:Deveel.Data.SortDirection">
            <summary>
            The direction to sort the results of 
            a query.
            </summary>
        </member>
        <member name="F:Deveel.Data.SortDirection.Ascending">
            <summary>
            Sorts the results in ascending order.
            </summary>
        </member>
        <member name="F:Deveel.Data.SortDirection.Descending">
            <summary>
            Sorts the results in descending order.
            </summary>
        </member>
        <member name="T:Deveel.Data.SystemTime">
            <summary>
            A default implementation of <see cref="T:Deveel.Data.ISystemTime"/> that
            uses the <see cref="T:System.DateTimeOffset"/> of the current system.
            </summary>
        </member>
        <member name="P:Deveel.Data.SystemTime.UtcNow">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Data.SystemTime.Now">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Data.SystemTime.Default">
            <summary>
            Gets the default instance of the system time.
            </summary>
        </member>
    </members>
</doc>
