<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Repository.MongoFramework</name>
    </assembly>
    <members>
        <member name="T:Deveel.Data.GeoPoint">
            <summary>
            A structure that represents a point in the Earth surface
            </summary>
        </member>
        <member name="M:Deveel.Data.GeoPoint.#ctor(System.Double,System.Double)">
            <summary>
            Constructs the point with the given latitude and longitude
            </summary>
            <param name="latitude">
            The latitude of the point
            </param>
            <param name="longitude">
            The longitude of the point
            </param>
        </member>
        <member name="P:Deveel.Data.GeoPoint.Latitude">
            <summary>
            Gets the latitude of the point
            </summary>
        </member>
        <member name="P:Deveel.Data.GeoPoint.Longitude">
            <summary>
            Gets the longitude of the point
            </summary>
        </member>
        <member name="M:Deveel.Data.GeoPoint.ToString">
            <inheritdoc />
        </member>
        <member name="T:Deveel.Data.IMongoDbConnection`1">
            <summary>
            A connection to a MongoDB database that is 
            specific to a given <see cref="T:MongoFramework.MongoDbContext"/>
            </summary>
            <typeparam name="TContext">
            The type of the <see cref="T:MongoFramework.MongoDbContext"/> that
            this connection is specific to.
            </typeparam>
            <seealso cref="T:MongoFramework.IMongoDbConnection"/>
        </member>
        <member name="T:Deveel.Data.MongoConnectionBuilder">
            <summary>
            An object that is used to build a <see cref="T:MongoFramework.IMongoDbConnection"/>
            using a fluent pattern.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.#ctor">
            <summary>
            Constructs the builder.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoConnectionBuilder.Connection">
            <summary>
            Gets the connection instance built by this builder.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.UseConnection(System.String)">
            <summary>
            Uses the specified connection string to build the connection.
            </summary>
            <param name="connectionString">
            The connection string to use to build the connection.
            </param>
            <returns>
            Returns this builder to allow chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="connectionString"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.UseUrl(MongoDB.Driver.MongoUrl)">
            <summary>
            Uses the specified encoded MongoDB URL to build the connection.
            </summary>
            <param name="url">
            The instance of <see cref="T:MongoDB.Driver.MongoUrl"/> to use to build the connection.
            </param>
            <returns>
            Returns this builder to allow chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="url"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.UseSettings(System.Action{MongoDB.Driver.MongoClientSettings})">
            <summary>
            Configures the settings of the connection.
            </summary>
            <param name="settings">
            The action to use to configure the settings.
            </param>
            <returns>
            Returns this builder to allow chaining.
            </returns>
        </member>
        <member name="T:Deveel.Data.MongoConnectionBuilder`1">
            <summary>
            A typed builder for a <see cref="T:MongoFramework.IMongoDbConnection"/> that
            is specific for a given <see cref="T:MongoFramework.IMongoDbContext"/>.
            </summary>
            <typeparam name="TContext">
            The type of the <see cref="T:MongoFramework.IMongoDbContext"/> that is
            this builder is specific for.
            </typeparam>
        </member>
        <member name="P:Deveel.Data.MongoConnectionBuilder`1.Connection">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.MongoDbConnectionExtensions">
            <summary>
            Extends the <see cref="T:MongoFramework.IMongoDbConnection"/> interface with
            helper methods to build a connection for a specific context.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoDbConnectionExtensions.GetUrl(MongoFramework.IMongoDbConnection)">
            <summary>
            Attempts to get the <see cref="T:MongoDB.Driver.MongoUrl"/> instance
            for the given connection.
            </summary>
            <param name="connection">
            The connection to get the URL from.
            </param>
            <remarks>
            This method uses reflection to get the <see cref="T:MongoDB.Driver.MongoUrl"/>
            instance from a default <c>Url</c> property eventually
            defined in the connection type.
            </remarks>
            <returns>
            Returns the <see cref="T:MongoDB.Driver.MongoUrl"/> instance if available,
            otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoDbConnectionExtensions.ForContext``1(MongoFramework.IMongoDbConnection)">
            <summary>
            Constructs a new <see cref="T:Deveel.Data.IMongoDbConnection`1"/> instance
            for a given context from the given connection.
            </summary>
            <typeparam name="TContext">
            The type of the context to build the connection for.
            </typeparam>
            <param name="connection">
            The connection to build the context for.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.IMongoDbConnection`1"/>
            that is wrapping the given connection for the specified
            type of context.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the given <paramref name="connection"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Deveel.Data.MongoDbConnection`1">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IMongoDbConnection`1"/> that
            is used to create a connection to a MongoDB database.
            </summary>
            <typeparam name="TContext">
            The type of the context that is used to create the connection.
            </typeparam>
            <remarks>
            This object wraps a <see cref="T:MongoFramework.IMongoDbConnection"/> and it's used
            to strongly type the connection to a specific context.
            </remarks>
        </member>
        <member name="P:Deveel.Data.MongoDbConnection`1.Client">
            <inheritdoc/>
        </member>
        <member name="P:Deveel.Data.MongoDbConnection`1.Url">
            <summary>
            Gets the URL of the connection to the MongoDB database.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoDbConnection`1.DiagnosticListener">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoDbConnection`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoDbConnection`1.GetDatabase">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoDbConnection`1.FromUrl(MongoDB.Driver.MongoUrl)">
            <summary>
            Creates a new connection to the MongoDB database using the given
            URL to the database.
            </summary>
            <param name="url">
            The MongoDB URL-formatted configuration string.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.MongoDbConnection`1"/> that
            is strongly typed to the given context.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoDbConnection`1.FromConnectionString(System.String)">
            <summary>
            Creates a new connection to the MongoDB database using the given
            connection string to the database.
            </summary>
            <param name="connectionString">
            The MongoDB connection string.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.MongoDbConnection`1"/> that
            is strongly typed to the given context.
            </returns>
        </member>
        <member name="T:Deveel.Data.MongoGeoDistanceFilter`1">
            <summary>
            A filter that can be used to filter a <see cref="T:System.Linq.IQueryable`1"/>
            for entities that are within a given distance from a center point.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to be filtered.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.MongoGeoDistanceFilter`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Deveel.Data.GeoPoint,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Constructs the filter by specifying the field that contains
            the location of the entity, the center point and the maximum
            distance from the center point.
            </summary>
            <param name="field">
            The expression that identifies the field that contains the
            location of the entity.
            </param>
            <param name="center">
            The center point to calculate the distance from.
            </param>
            <param name="maxDistance">
            The maximum distance from the center point.
            </param>
            <param name="minDistance">
            The minimum distance from the center point.
            </param>
        </member>
        <member name="P:Deveel.Data.MongoGeoDistanceFilter`1.LocationField">
            <summary>
            Gets the expression that identifies the field that contains
            the location of the entity.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoGeoDistanceFilter`1.Center">
            <summary>
            Gets the center point to calculate the distance from.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoGeoDistanceFilter`1.MaxDistance">
            <summary>
            Gets the maximum distance from the center point.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoGeoDistanceFilter`1.MinDistance">
            <summary>
            Gets the minimum distance from the center point.
            </summary>
        </member>
        <member name="T:Deveel.Data.MongoRepository`1">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IRepository`1"/> contract
            that uses the MongoDB system to store and retrieve data.
            </summary>
            <typeparam name="TEntity">
            The type of the entity that is stored in the repository.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.#ctor(MongoFramework.IMongoDbContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructs the repository with the given context and logger.
            </summary>
            <param name="context">
            The context that is used to handle the connection to the MongoDB server.
            </param>
            <param name="logger">
            A logger instance that is used to log messages from the repository.
            </param>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.#ctor(MongoFramework.IMongoDbContext,Microsoft.Extensions.Logging.ILogger{Deveel.Data.MongoRepository{`0}})">
            <summary>
            Constructs the repository with the given context and logger.
            </summary>
            <param name="context">
            The context that is used to handle the connection to the MongoDB server.
            </param>
            <param name="logger">
            A logger instance that is used to log messages from the repository.
            </param>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.Context">
            <summary>
            Gets the context that is used to handle the connection to the MongoDB server.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.DbSet">
            <summary>
            Gets the <see cref="T:MongoFramework.IMongoDbSet`1"/> that is used to handle the
            repository operations.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance that is used to log messages
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.TenantId">
            <summary>
            When the underlying context is a <see cref="T:MongoFramework.IMongoDbTenantContext"/>,
            this property returns the tenant identifier that is used to filter
            the data in the repository.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.Collection">
            <summary>
            Gets the <see cref="T:MongoDB.Driver.IMongoCollection`1"/> instance that is used
            to handle the data in the repository.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.ThrowIfDisposed">
            <summary>
            Throws an exception if the repository has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the repository has been disposed.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.MakeEntitySet">
            <summary>
            Constructs a new <see cref="T:MongoFramework.IMongoDbSet`1"/> that is
            coherent with the context and the entity type.
            </summary>
            <returns></returns>
            <exception cref="T:Deveel.Data.RepositoryException"></exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.GetEntityKey(`0)">
            <summary>
            Gets the value of the ID property of the given entity.
            </summary>
            <param name="entity">
            The entity whose ID property value is to be retrieved.
            </param>
            <returns>
            Returns the value of the ID property of the given entity.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.ConvertKeyValue(System.Object)">
            <summary>
            Converts the given value to the type of the ID property of the
            entity managed by this repository.
            </summary>
            <param name="key">
            The value representing the key of the entity.
            </param>
            <returns>
            Returns the value converted accordingly to the type of the ID property
            of the entity managed by this repository, or <c>null</c> if the given
            key is <c>null</c> or empty.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if the entity managed by this repository has no ID property
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the value cannot be converted to the type of the ID
            property of the entity managed by this repository.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.Field(System.String)">
            <summary>
            Resolves a given field name to an expression that can be used
            to access the field in the entity.
            </summary>
            <param name="fieldName">
            The name of the field to be resolved.
            </param>
            <returns>
            Returns an instance of <see cref="T:System.Linq.Expressions.Expression`1"/> that
            is used to access the field in the entity.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.CollectionExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Verifies if the repository exists in the underlying database.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns <c>true</c> if the repository exists in the underlying
            database, otherwise <c>false</c>.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while verifying the existence of the
            collection in the underlying database.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.CreateCollectionAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the collection that is used to store the entities 
            of this repository in the underlying database.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns a task that, when completed, has created the collection.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while creating the collection in the
            database or if the collection already exists.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.CreateIndicesAsync(System.Threading.CancellationToken)">
            <summary>
            Creates all the indices that are defined for the entity
            that is managed by this repository.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns a task that, when completed, has created all the indices
            of the repository.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException"></exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.DropIndicesAsync(System.Threading.CancellationToken)">
            <summary>
            Drops all the indices that are defined for the entity
            that is managed by this repository.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns a task that, when completed, has dropped all the indices
            from the repository.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while dropping the indices.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.DropCollectionAsync(System.Threading.CancellationToken)">
            <summary>
            Drops the collection that is used to store the entities
            that are managed by this repository in the underlying database.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns a task that, when completed, has dropped the collection.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException"></exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.OnAddEntity(`0)">
            <summary>
            A callback method that is invoked before the entity is created.
            </summary>
            <param name="entity">
            The entity that is about to be created.
            </param>
            <returns>
            Returns the entity that is about to be created.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new entity in the repository.
            </summary>
            <param name="entity">
            The entity to be created in the repository.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns the unique identifier of the created entity.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while creating the entity in the
            underlying database.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.OnEntityUpdate(`0)">
            <summary>
            A callback method that is invoked before the entity is updated.
            </summary>
            <param name="entity">
            The entity that is about to be updated.
            </param>
            <returns>
            Returns the entity that is about to be updated.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.FindByKeyAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.FindAsync(Deveel.Data.Query,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.FindAllAsync(Deveel.Data.Query,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.GetPageAsync(Deveel.Data.PageQuery{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.ExistsAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.CountAsync(Deveel.Data.IQueryFilter,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the unmanaged resources used by the repository.
            </summary>
            <param name="disposing">
            Indicates if the repository is being disposed of.
            </param>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.DisposeAsyncCore">
            <summary>
            Performs the async cleanup of the repository.
            </summary>
            <returns>
            Returns a task that, when completed, has performed the cleanup.
            </returns>
        </member>
        <member name="T:Deveel.Data.MongoRepositoryProvider`3">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IRepositoryProvider`1"/> that
            is able to create a <see cref="T:Deveel.Data.MongoRepository`1"/> for a given
            entity type and tenant.
            </summary>
            <typeparam name="TContext">
            The type of the <see cref="T:MongoFramework.IMongoDbContext"/> to be used to create the
            instances of <see cref="T:Deveel.Data.MongoRepository`1"/> for a given tenant.
            </typeparam>
            <typeparam name="TEntity">
            The type of the entity to be managed by the repository.
            </typeparam>
            <typeparam name="TTenantInfo">
            The type of the tenant information to be used to create the context
            </typeparam>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.#ctor(System.Collections.Generic.IEnumerable{Finbuckle.MultiTenant.IMultiTenantStore{`2}},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructs the provider with a given set of stores to be used to
            resolve the tenant information and connection string.
            </summary>
            <param name="stores">
            The set of stores to be used to resolve the tenant information
            and connection string.
            </param>
            <param name="loggerFactory">
            A factory to create the logger to be used by the repository.
            </param>
        </member>
        <member name="P:Deveel.Data.MongoRepositoryProvider`3.LoggerFactory">
            <summary>
            Gets the factory to create the logger to be used by the repository.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.GetTenantInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to resolve the tenant information for a given tenant ID.
            </summary>
            <param name="tenantId">
            The identifier of the tenant to be resolved (that can
            be the ID or the identifier of the tenant).
            </param>
            <param name="cancellationToken">
            A token to cancel the operation.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TTenantInfo"/> that
            is identified by the given <paramref name="tenantId"/>, or
            <c>null</c> if no tenant information could be resolved.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.CreateLogger">
            <summary>
            Creates a logger to be used by the repository.
            </summary>
            <returns>
            Returns an instance of <see cref="T:Microsoft.Extensions.Logging.ILogger"/> that is used
            to log messages from the repository.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.CreateContext(MongoFramework.IMongoDbConnection,`2)">
            <summary>
            Creates an instance of <typeparamref name="TContext"/> that
            can be used to create the repository for a given tenant.
            </summary>
            <param name="connection">
            The connection to the MongoDB database.
            </param>
            <param name="tenantInfo">
            The information about the tenant to be used to create the context.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TContext"/> that
            can be used to create the repository for a given tenant.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either the <paramref name="connection"/> or the
            <paramref name="tenantInfo"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the <typeparamref name="TContext"/> has no
            suitable constructor to be created.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.CreateTenantContext(`2)">
            <summary>
            Creates an instance of <see cref="T:Finbuckle.MultiTenant.IMultiTenantContext`1"/>
            for a given tenant.
            </summary>
            <param name="tenantInfo"></param>
            <returns>
            Returns an instance of <see cref="T:Finbuckle.MultiTenant.IMultiTenantContext`1"/>
            that can be used to create the repository for a given tenant.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.GetRepositoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an instance of <see cref="T:Deveel.Data.MongoRepository`1"/> for
            the given tenant.
            </summary>
            <param name="tenantId">
            The identifier of the tenant to be used to create the repository.
            </param>
            <param name="cancellationToken">
            A token to cancel the operation.
            </param>
            <returns></returns>
            <exception cref="T:Deveel.Data.RepositoryException"></exception>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.CreateRepository(`0,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates an instance of <see cref="T:Deveel.Data.MongoRepository`1"/> for
            the given context.
            </summary>
            <param name="context">
            The context to be used to create the repository.
            </param>
            <param name="logger">
            A logger to be used by the repository.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.MongoRepository`1"/> that
            can be used to manage the entity of type <typeparamref name="TEntity"/>.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.CreateRepository(`0)">
            <summary>
            Creates a repository for a given context.
            </summary>
            <param name="context">
            The context to be used to create the repository.
            </param>
            <returns>
            Returns an instance of <see cref="T:Deveel.Data.MongoRepository`1"/> that
            is used to manage the entity of type <typeparamref name="TEntity"/>.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.Dispose(System.Boolean)">
            <summary>
            Disposes the provider and all the repositories created by it.
            </summary>
            <param name="disposing">
            A flag indicating if the provider is disposing.
            </param>
        </member>
        <member name="M:Deveel.Data.MongoRepositoryProvider`3.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.ObjectIdExtensions">
            <summary>
            Extends the <see cref="T:MongoDB.Bson.ObjectId"/> type to provide
            heler methods to convert to and from string.
            </summary>
        </member>
        <member name="M:Deveel.Data.ObjectIdExtensions.ToEntityId(MongoDB.Bson.ObjectId)">
            <summary>
            Converts the given <see cref="T:MongoDB.Bson.ObjectId"/> to a string.
            </summary>
            <param name="objectId">
            The object id to convert.
            </param>
            <returns>
            Returns the string representation of the object id,
            or an empty string if the given object id is <see cref="P:MongoDB.Bson.ObjectId.Empty"/>.
            </returns>
        </member>
        <member name="T:Deveel.Data.RepositoryExtensions">
            <summary>
            Extends the <see cref="T:Deveel.Data.IRepository`1"/> interface
            to provide additional methods for MongoDB.
            </summary>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.FindFirstByGeoDistanceAsync``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Deveel.Data.GeoPoint,System.Nullable{System.Double})">
            <summary>
            Finds the first entity in the repository that matches the given
            geo-distance filter.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to be found.
            </typeparam>
            <param name="repository">
            The repository to search into.
            </param>
            <param name="field">
            The expression that identifies the field to be used for the
            identification of the location of the entity.
            </param>
            <param name="point">
            The point to be used as the center of the search.
            </param>
            <param name="maxDistance">
            The maximum distance from the center point to search for.
            </param>
            <returns>
            Returns an instance of <typeparamref name="TEntity"/> that
            matches the given filter, or <c>null</c> if no entity is found.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given repository is not a <see cref="T:Deveel.Data.MongoRepository`1"/>.
            </exception>
            <seealso cref="T:Deveel.Data.MongoGeoDistanceFilter`1"/>
        </member>
        <member name="M:Deveel.Data.RepositoryExtensions.FindAllByGeoDistanceAsync``1(Deveel.Data.IRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Deveel.Data.GeoPoint,System.Nullable{System.Double})">
            <summary>
            Finds all the entities in the repository that match the given
            geo-distance filter.
            </summary>
            <typeparam name="TEntity">
            The type of the entity to be found.
            </typeparam>
            <param name="repository">
            The repository to search into.
            </param>
            <param name="field">
            The expression that identifies the field to be used for the
            identification of the location of the entity.
            </param>
            <param name="point">
            The point to be used as the center of the search.
            </param>
            <param name="maxDistance">
            The maximum distance from the center point to search for.
            </param>
            <returns>
            Returns an instance of <see cref="T:System.Collections.Generic.IList`1"/> that
            is the result of the search.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Deveel.Data.ServiceCollectionExtensions">
            <summary>
            Extends the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to provide methods
            to register a <see cref="T:MongoFramework.IMongoDbContext"/> in service collections.
            </summary>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddMongoDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Finbuckle.MultiTenant.ITenantInfo,Deveel.Data.MongoConnectionBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a <see cref="T:MongoFramework.IMongoDbContext"/> to the service collection
            for a given tenant.
            </summary>
            <typeparam name="TContext">
            The type of the context to register.
            </typeparam>
            <param name="services">
            The service collection to add the context to.
            </param>
            <param name="connectionBuilder">
            A delegate to a method that builds the connection string
            for a given tenant.
            </param>
            <param name="lifetime">
            The lifetime of the context in the service collection.
            </param>
            <returns>
            Returns the service collection for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddMongoDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Deveel.Data.MongoConnectionBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a <see cref="T:MongoFramework.IMongoDbContext"/> to the service collection.
            </summary>
            <typeparam name="TContext">
            The type of the context to register.
            </typeparam>
            <param name="services">
            The service collection to add the context to.
            </param>
            <param name="connectionBuilder">
            A delegate to a method that builds the connection string.
            </param>
            <param name="lifetime">
            The lifetime of the context in the service collection.
            </param>
            <returns>
            Returns the service collection for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddMongoDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Deveel.Data.MongoConnectionBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a <see cref="T:MongoFramework.IMongoDbContext"/> to the service collection.
            </summary>
            <typeparam name="TContext">
            The type of the context to register.
            </typeparam>
            <param name="services">
            The service collection to add the context to.
            </param>
            <param name="connectionBuilder">
            A delegate to a method that builds the connection string.
            </param>
            <param name="lifetime">
            The lifetime of the context in the service collection.
            </param>
            <returns>
            Returns the service collection for chaining.
            </returns>
        </member>
    </members>
</doc>
