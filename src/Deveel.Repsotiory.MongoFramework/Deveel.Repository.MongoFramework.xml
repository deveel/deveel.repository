<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Repository.MongoFramework</name>
    </assembly>
    <members>
        <member name="T:Deveel.Data.IMongoDbConnection`1">
            <summary>
            A connection to a MongoDB database that is 
            specific to a given <see cref="T:MongoFramework.MongoDbContext"/>
            </summary>
            <typeparam name="TContext">
            The type of the <see cref="T:MongoFramework.MongoDbContext"/> that
            this connection is specific to.
            </typeparam>
            <seealso cref="T:MongoFramework.IMongoDbConnection"/>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceFindingByIdForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceFoundByIdForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceDeletingForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceDeletedForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceCreatedForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceUpdatingForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceUpdatedForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.MongoConnectionBuilder">
            <summary>
            An object that is used to build a <see cref="T:MongoFramework.IMongoDbConnection"/>
            using a fluent pattern.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.#ctor">
            <summary>
            Constructs the builder.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoConnectionBuilder.Connection">
            <summary>
            Gets the connection instance built by this builder.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.UseConnection(System.String)">
            <summary>
            Uses the specified connection string to build the connection.
            </summary>
            <param name="connectionString">
            The connection string to use to build the connection.
            </param>
            <returns>
            Returns this builder to allow chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="connectionString"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.UseUrl(MongoDB.Driver.MongoUrl)">
            <summary>
            Uses the specified encoded MongoDB URL to build the connection.
            </summary>
            <param name="url">
            The instance of <see cref="T:MongoDB.Driver.MongoUrl"/> to use to build the connection.
            </param>
            <returns>
            Returns this builder to allow chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="url"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoConnectionBuilder.UseSettings(System.Action{MongoDB.Driver.MongoClientSettings})">
            <summary>
            Configures the settings of the connection.
            </summary>
            <param name="settings">
            The action to use to configure the settings.
            </param>
            <returns>
            Returns this builder to allow chaining.
            </returns>
        </member>
        <member name="T:Deveel.Data.MongoConnectionBuilder`1">
            <summary>
            A typed builder for a <see cref="T:MongoFramework.IMongoDbConnection"/> that
            is specific for a given <see cref="T:MongoFramework.IMongoDbContext"/>.
            </summary>
            <typeparam name="TContext">
            The type of the <see cref="T:MongoFramework.IMongoDbContext"/> that is
            this builder is specific for.
            </typeparam>
        </member>
        <member name="P:Deveel.Data.MongoConnectionBuilder`1.Connection">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.MongoQueryFilter`1">
            <summary>
            A query filter that is based on a MongoDB filter definition.
            </summary>
            <typeparam name="TDocument">
            The type of document that is used to build the filter.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.MongoQueryFilter`1.#ctor(MongoDB.Driver.FilterDefinition{`0})">
            <summary>
            Constructs the filter with the given MongoDB filter definition.
            </summary>
            <param name="filter">
            The instance of <see cref="T:MongoDB.Driver.FilterDefinition`1"/> that
            represents the filter to apply.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="filter"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:Deveel.Data.MongoQueryFilter`1.Filter">
            <summary>
            Gets the MongoDB filter definition that is used to build the filter.
            </summary>
        </member>
        <member name="T:Deveel.Data.MongoRepository`1">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IRepository`1"/> contract
            that uses the MongoDB system to store and retrieve data.
            </summary>
            <typeparam name="TEntity">
            The type of the entity that is stored in the repository.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.#ctor(MongoFramework.IMongoDbContext,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructs the repository with the given context and logger.
            </summary>
            <param name="context">
            The context that is used to handle the connection to the MongoDB server.
            </param>
            <param name="logger">
            A logger instance that is used to log messages from the repository.
            </param>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.#ctor(MongoFramework.IMongoDbContext,Microsoft.Extensions.Logging.ILogger{Deveel.Data.MongoRepository{`0}})">
            <summary>
            Constructs the repository with the given context and logger.
            </summary>
            <param name="context">
            The context that is used to handle the connection to the MongoDB server.
            </param>
            <param name="systemTime">
            A service that provides the current system time.
            </param>
            <param name="logger">
            A logger instance that is used to log messages from the repository.
            </param>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.Context">
            <summary>
            Gets the context that is used to handle the connection to the MongoDB server.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.DbSet">
            <summary>
            Gets the <see cref="T:MongoFramework.IMongoDbSet`1"/> that is used to handle the
            repository operations.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.SystemTime">
            <summary>
            Gets a service that provides the current system time.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance that is used to log messages
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.TenantId">
            <summary>
            When the underlying context is a <see cref="T:MongoFramework.IMongoDbTenantContext"/>,
            this property returns the tenant identifier that is used to filter
            the data in the repository.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`1.Collection">
            <summary>
            Gets the <see cref="T:MongoDB.Driver.IMongoCollection`1"/> instance that is used
            to handle the data in the repository.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.ThrowIfDisposed">
            <summary>
            Throws an exception if the repository has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the repository has been disposed.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.MakeEntitySet">
            <summary>
            Constructs a new <see cref="T:MongoFramework.IMongoDbSet`1"/> that is
            coherent with the context and the entity type.
            </summary>
            <returns></returns>
            <exception cref="T:Deveel.Data.RepositoryException"></exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.GetEntityKey(`0)">
            <summary>
            Gets the value of the ID property of the given entity.
            </summary>
            <param name="entity">
            The entity whose ID property value is to be retrieved.
            </param>
            <returns>
            Returns the value of the ID property of the given entity.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.ConvertKeyValue(System.Object)">
            <summary>
            Converts the given value to the type of the ID property of the
            entity managed by this repository.
            </summary>
            <param name="key">
            The value representing the key of the entity.
            </param>
            <returns>
            Returns the value converted accordingly to the type of the ID property
            of the entity managed by this repository, or <c>null</c> if the given
            key is <c>null</c> or empty.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if the entity managed by this repository has no ID property
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the value cannot be converted to the type of the ID
            property of the entity managed by this repository.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.GetFilterDefinition(Deveel.Data.IQueryFilter)">
            <summary>
            Gets the MongoDB filter definition for the given query filter.
            </summary>
            <param name="filter">
            The query filter to be converted to a MongoDB filter definition.
            </param>
            <returns>
            Returns an instance of <see cref="T:MongoDB.Driver.FilterDefinition`1"/> that
            is mapped from the given query filter.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given query filter is not supported by this repository.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.Field(System.String)">
            <summary>
            Resolves a given field name to an expression that can be used
            to access the field in the entity.
            </summary>
            <param name="fieldName">
            The name of the field to be resolved.
            </param>
            <returns>
            Returns an instance of <see cref="T:System.Linq.Expressions.Expression`1"/> that
            is used to access the field in the entity.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.CollectionExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Verifies if the repository exists in the underlying database.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns <c>true</c> if the repository exists in the underlying
            database, otherwise <c>false</c>.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while verifying the existence of the
            collection in the underlying database.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.OnAddEntity(`0)">
            <summary>
            A callback method that is invoked before the entity is created.
            </summary>
            <param name="entity">
            The entity that is about to be created.
            </param>
            <returns>
            Returns the entity that is about to be created.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new entity in the repository.
            </summary>
            <param name="entity">
            The entity to be created in the repository.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns the unique identifier of the created entity.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while creating the entity in the
            underlying database.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Data.MongoRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Data.ServiceCollectionExtensions">
            <summary>
            Extends the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to provide methods
            to register a <see cref="T:MongoFramework.IMongoDbContext"/> in service collections.
            </summary>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddMongoDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Finbuckle.MultiTenant.ITenantInfo,Deveel.Data.MongoConnectionBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a <see cref="T:MongoFramework.IMongoDbContext"/> to the service collection
            for a given tenant.
            </summary>
            <typeparam name="TContext">
            The type of the context to register.
            </typeparam>
            <param name="services">
            The service collection to add the context to.
            </param>
            <param name="connectionBuilder">
            A delegate to a method that builds the connection string
            for a given tenant.
            </param>
            <param name="lifetime">
            The lifetime of the context in the service collection.
            </param>
            <returns>
            Returns the service collection for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddMongoDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Deveel.Data.MongoConnectionBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a <see cref="T:MongoFramework.IMongoDbContext"/> to the service collection.
            </summary>
            <typeparam name="TContext">
            The type of the context to register.
            </typeparam>
            <param name="services">
            The service collection to add the context to.
            </param>
            <param name="connectionBuilder">
            A delegate to a method that builds the connection string.
            </param>
            <param name="lifetime">
            The lifetime of the context in the service collection.
            </param>
            <returns>
            Returns the service collection for chaining.
            </returns>
        </member>
        <member name="M:Deveel.Data.ServiceCollectionExtensions.AddMongoDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.IServiceProvider,Deveel.Data.MongoConnectionBuilder},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Adds a <see cref="T:MongoFramework.IMongoDbContext"/> to the service collection.
            </summary>
            <typeparam name="TContext">
            The type of the context to register.
            </typeparam>
            <param name="services">
            The service collection to add the context to.
            </param>
            <param name="connectionBuilder">
            A delegate to a method that builds the connection string.
            </param>
            <param name="lifetime">
            The lifetime of the context in the service collection.
            </param>
            <returns>
            Returns the service collection for chaining.
            </returns>
        </member>
    </members>
</doc>
